[ { "title": "Nginx Reverse Proxy", "url": "/posts/nginx-reverse-proxy/", "categories": "homelab", "tags": "homelab, nginx, docker", "date": "2023-09-23 18:00:00 +0200", "snippet": "Getting StartedFirstly we need to make sure we have docker and docker-compose installed and setup.Once the has been done we need to set up the docker-compose.yml file for nginx. We can get the dock...", "content": "Getting StartedFirstly we need to make sure we have docker and docker-compose installed and setup.Once the has been done we need to set up the docker-compose.yml file for nginx. We can get the docker-compose.yml file from Nginx Proxy Manager or copy the following docker-compose.yml fileversion: '3.8'services: app: image: 'jc21/nginx-proxy-manager:latest' restart: unless-stopped ports: - '80:80' - '81:81' - '443:443' volumes: - ./data:/data - ./letsencrypt:/etc/letsencryptOnce we have this made, make changed to the ports if needed.Port ForwardingBefore we go any further we need to make sure that we are fowarding ports 80 and 443 to the ports that you have set in the docker compose file.This can be done by looking up the name of your router and look up port fowarding ports 80 and 443 for your router.Cloudflare setupIn this guide we use Cloudflare for our ssl creation. We will need to get our API key for Zone editing. We need this so that Nginx can create ssl certificates for our websites and hosts we want to forward out to the wider web.This can be done by logging into your Cloudflare Dashboard. Once we have logged in we go to Account, then API key.We can then create our API key using the Edit Zone templete. When we have our API key we need to keep this one side as Cloudflare doesn‚Äôt let you look at these API keys once they have been made.The second step we need to do is create a DNS record for the service we want to forward out. We will set the subname for the DNS record and in the ip we will set it to our Public IP, you can get this by typing into Google ‚ÄúWhats my ip‚Äù. Once you type this Google will give you what your current public ip is.Extra setupWe need to make sure that in our SSL/TLS tab we have our encryption mode set to full or full (strict), along with going to ‚ÄúEdge Certificates‚Äù and making sure we have ‚ÄúAlways Use HTTPS‚Äù set to true. Once that is done we can go to our Nginx SetupNginx SetupNow that we have done all of this we can finnaly go to Nginxüéâ. You can get to Nginx by typing in the IP of the device you are hosting Nginx from along with the prot 81 at the end. For example http://192.168.1.50:81. This will then take you to the Nginix Proxy Manager website where you will fill in the default login details which should be: admin@example.com changemeOnce you have filled that in and press login you will be asked to change the details for the main Admin account.SSL CertificatesNow that we have gained access to our Nginx instance we need to add our own SSL Cert. We do this by going to the SSL Certificates tab. This will take you to where you can fill in details for your SSL Cert. We will press on ‚ÄúAdd SSL Certificate‚Äù, then press ‚ÄúLet‚Äôs Encrypt‚Äù and it will bring up a form for us that we need to fill in. It should look like this:CIn here we need to fill in the domain names we wish to create a certificate for. What you can do is peg this SSL cert to one domain name or make a wildcard cert. In most cases creating a wildcard cert is easier to do and more effective. To create a wildcard cert we need to type in our domain name like so *.example.com. We will then select DNS Challenge, this will then give us a dropdown for DNS Provider. In here we will look for Cloudflare and select this. You should see something like thisHere is wherer we will take that API key we wrote down ealier and fill it in.Once all of this has been done you will see that you now have yourself your own SSL cert.We can now go onto the next step and that is creating our hosts.HostsSo to create a proxy host we need to press on the Hosts button in the nav bar. This will give us a dropdown in which we will press Proxy Hosts.You should then see a new blank page with the only notable things showing is ‚ÄúAdd Proxy Host‚Äù.We will press ‚ÄúAdd Proxy Host‚Äù and this will give us a new form for us to fill in. We will go about everything the same way as before just this time for the domain name you will want to type the name of the service you want to forward, for example plex.example.com.We will then type the IP of the machine that is hosting the service we will host. Once we have put the IP in we will need to put the port in.You can then tick ‚ÄúBlock Common Exploits‚Äù and then move onto the SSL tab.Here you will select the SSL cert you just made and make sure to press Force SSL. This will make sure that your service will always use HTTPS.Once this has been done you should be set, go to the domain name you just typed in and boom you are now hosting your service out to the internet with your own certs." }, { "title": "Jellyfin Docker", "url": "/posts/jellyfin-stack/", "categories": "homelab", "tags": "homelab, server, jellyfin, sonarr, radarr, docker", "date": "2023-09-19 19:00:00 +0200", "snippet": "Docker Compose JellyfinAfter some searching for a good Jellyfin stack we came across the github repo made by AdrienPoupa, the repo is called Docker-Compose-Nas. This github repo fills our Jellyfin ...", "content": "Docker Compose JellyfinAfter some searching for a good Jellyfin stack we came across the github repo made by AdrienPoupa, the repo is called Docker-Compose-Nas. This github repo fills our Jellyfin needs with having Sonarr, Radarr, Prowlarr and Jellyfin setup in one big docker-compose file.Table of Content Docker Compose Jellyfin Table of Content Jellyfin Stack Environment Variables Quick Start Cloudflare Tunnels Laptop Specific Configuration Prerequisite‚Äôs Docker Docker-Compose Laptop or Server with Intel i3 or Ryzen 3 1200 and up Domain Name SSH connection to serverJellyfin StackThe Jellyfin stack that we will use includes the following extra containers: Jellyfin Sonarr Radarr Prowlarr qBittorrentWe have done some editing to the docker-compose.yml file as using Jellyfin behind the traefik routor doesn‚Äôt work well.The first step you need to do is clone the github repo to your server with the following command:git clone https://github.com/AdrienPoupa/docker-compose-nascd docker-compose-nasOnce we have downloaded the Github repo we need to do some changed to the docker-compose.yml file along with creating the .env file.The .env file can be made by copying the example file with this command:cp .env.example .envOnce this is done fill in the .env file with the details for everything that is needed. Here is the env variables that are used in this project.Environment Variables Variable Description Default COMPOSE_FILE Docker compose files to load docker-compose.yml COMPOSE_PATH_SEPARATOR Path separator between compose files to load : USER_ID ID of the user to use in Docker containers 1000 GROUP_ID ID of the user group to use in Docker containers 1000 TIMEZONE TimeZone used by the container. America/New_York DATA_ROOT Host location of the data files /mnt/data DOWNLOAD_ROOT Host download location for qBittorrent, should be a subfolder of DATA_ROOT /mnt/data/torrents PIA_LOCATION Servers to use for PIA ca (Montreal, Canada) PIA_USER PIA username ¬† PIA_PASS PIA password ¬† PIA_LOCAL_NETWORK PIA local network 192.168.0.0/16 HOSTNAME Hostname of the NAS, could be a local IP or a domain name localhost ADGUARD_HOSTNAME Optional - AdGuard Home hostname used, if enabled ¬† ADGUARD_USERNAME Optional - AdGuard Home username to show details in the homepage, if enabled ¬† ADGUARD_PASSWORD Optional - AdGuard Home password to show details in the homepage, if enabled ¬† DNS_CHALLENGE Enable/Disable DNS01 challenge, set to false to disable. true DNS_CHALLENGE_PROVIDER Provider for DNS01 challenge, see list here. cloudflare LETS_ENCRYPT_CA_SERVER Let‚Äôs Encrypt CA Server used to generate certificates, set to production by default.Set to https://acme-staging-v02.api.letsencrypt.org/directory to test your changes with the staging server. https://acme-v02.api.letsencrypt.org/directory LETS_ENCRYPT_EMAIL E-mail address used to send expiration notifications ¬† CLOUDFLARE_EMAIL CloudFlare Account email ¬† CLOUDFLARE_DNS_API_TOKEN API token with DNS:Edit permission ¬† CLOUDFLARE_ZONE_API_TOKEN API token with Zone:Read permission ¬† SONARR_API_KEY Sonarr API key to show information in the homepage ¬† RADARR_API_KEY Radarr API key to show information in the homepage ¬† PROWLARR_API_KEY Prowlarr API key to show information in the homepage ¬† JELLYFIN_API_KEY Jellyfin API key to show information in the homepage ¬† HOMEPAGE_VAR_TITLE Title of the homepage Docker-Compose NAS HOMEPAGE_VAR_SEARCH_PROVIDER Homepage search provider, see list here google HOMEPAGE_VAR_HEADER_STYLE Homepage header style, see list here boxed HOMEPAGE_VAR_WEATHER_CITY Homepage weather city name ¬† HOMEPAGE_VAR_WEATHER_LAT Homepage weather city latitude ¬† HOMEPAGE_VAR_WEATHER_LONG Homepage weather city longitude ¬† HOMEPAGE_VAR_WEATHER_UNIT Homepage weather unit, either metric or imperial metric The changes made to the docker-compose.yml file are the followingversion: \"3.9\"services: ..... qbittorrent: ..... #- com.centurylinklabs.watchtower.depends-on=/vpn - homepage.group=Download - homepage.name=qBittorrent - homepage.icon=qbittorrent.png - homepage.href=/qbittorrent - homepage.description=Bittorrent client - homepage.weight=5 - homepage.widget.type=qbittorrent - homepage.widget.url=http://qbittorrent:8080 - homepage.widget.username=admin - homepage.widget.password=adminadmin # vpn: # image: thrnz/docker-wireguard-pia # container_name: vpn # volumes: # - ./pia:/pia # - ./pia-shared:/pia-shared # cap_add: # - NET_ADMIN # - SYS_MODULE # environment: # - LOC=${PIA_LOCATION} # - USER=${PIA_USER} # - PASS=${PIA_PASS} # - LOCAL_NETWORK=${PIA_LOCAL_NETWORK} # - PORT_FORWARDING=1 # - PORT_PERSIST=1 # - PORT_SCRIPT=/pia-shared/portupdate-qbittorrent.sh # - EXIT_ON_FATAL=1 # sysctls: # - net.ipv4.conf.all.src_valid_mark=1 # - net.ipv6.conf.default.disable_ipv6=1 # - net.ipv6.conf.all.disable_ipv6=1 # - net.ipv6.conf.lo.disable_ipv6=1 # healthcheck: # test: ping -c 1 www.google.com || exit 1 # interval: 30s # timeout: 10s # retries: 3 # restart: always # labels: # # network mode is not supported: https://github.com/containrrr/watchtower/issues/1286#issuecomment-1214291660 # - com.centurylinklabs.watchtower.enable=false jellyfin: image: jellyfin/jellyfin container_name: jellyfin environment: - PUID=${USER_ID} - PGID=${GROUP_ID} - TZ=${TIMEZONE} - JELLYFIN_PublishedServerUrl=${HOSTNAME}/jellyfin group_add: - \"109\" # Change this to match your \"render\" host group id and remove this comment volumes: - ./jellyfin/config:/config - ./jellyfin:/cache - /home/serveradmin/public:/data ports: - \"7359:7359/udp\" - \"1900:1900/udp\" - \"8096:8096\" devices: - /dev/dri/renderD128:/dev/dri/renderD128 # - /dev/dri/card0:/dev/dri/card0 restart: always labels:# - traefik.enable=true# - traefik.http.routers.jellyfin.rule=(Host(`${HOSTNAME}`) &amp;&amp; PathPrefix(`/jellyfin`))# - traefik.http.routers.jellyfin.tls=true# - traefik.http.routers.jellyfin.tls.certresolver=myresolver# - traefik.http.services.jellyfin.loadbalancer.server.port=8096 - homepage.group=Media - homepage.name=Jellyfin - homepage.icon=jellyfin.png - homepage.href=http://10.21.21.23:8096 - homepage.description=Media server - homepage.weight=3 - homepage.widget.type=jellyfin - homepage.widget.url=http://10.21.21.23:8096 - homepage.widget.key=${JELLYFIN_API_KEY} ....networks: default: name: docker-compose-nasThe changes that have been made is disabling the VPN as we don‚Äôt need our qBittorrent container behind a VPN. This is not recommended.The second change made is commenting out the traefik labels in the Jellyfin container because of the issues we had when trying to set this up.Once this has been done we can spin up the docker container.Quick StartFor the first time, run ./update-config.sh to update the applications base URLs and set the API keys in .env.If you want to show Jellyfin information in the homepage, create it in Jellyfin settings and fill JELLYFIN_API_KEY.Cloudflare TunnelsWe use Cloudflare Tunnels so that we can gain access to this stack outside of our home network.The documentation for cloudflare tunnels can be found hereLaptop Specific ConfigurationIf the server is installed on a laptop, you may want to disable the suspension when the lid is closed:sudo nano /etc/systemd/logind.confReplace: #HandleLidSwitch=suspend by HandleLidSwitch=ignore #LidSwitchIgnoreInhibited=yes by LidSwitchIgnoreInhibited=noThen restart:sudo service systemd-logind restart" } ]
